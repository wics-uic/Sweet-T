// Connect express application to mongodb
import express from "express";
import mongoose from "mongoose";
import bodyParser from "body-parser";
import dotenv from "dotenv";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";
import cors from "cors";
import cookieParser from "cookie-parser";
import { v4 as uuidv4 } from "uuid";
import exampleRoutes from './Route/exampleRoute.js';

const app = express();

app.use(bodyParser.json());
app.use(cookieParser()); // Add cookie parser middleware
// Enables cookie to be generated by the FE
app.use(cors({
    origin: process.env.FRONTEND_URL || 'http://localhost:4321', // Frontend URL
    credentials: true // Enable credentials (cookies) to be sent
}));
dotenv.config();

const PORT = process.env.PORT || 8000;
const MONGOURL = process.env.MONGO_URL;
const JWT_SECRET = process.env.JWT_SECRET || "SweetTProductionKey";

// User Schema with timestamps
const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true, lowercase: true, trim: true },
    password: { type: String, required: true },
    role: { type: String, enum: ['customer', 'admin'], required: true, default: 'customer' }
});

const User = mongoose.model('User', userSchema);

// Initialize default users (run once) this is a fail safe incase the admin user gets deleted from the db
async function initializeAdmin() {
    try {
        // Only create admin user
        const adminExists = await User.findOne({ email: 'admin@gmail.com' });

        if (!adminExists) {
            const hashedPassword = await bcrypt.hash('admin123', 10);
            await User.create({
                email: 'admin@gmail.com',
                password: hashedPassword,
                role: 'admin'
            });
            console.log('Admin user created');
        } else {
            console.log('Admin user already exists');
        }

        // Remove customer user if exists (cleanup)
        await User.deleteOne({ email: 'customer@gmail.com' });
        
    } catch (error) {
        console.error('Error initializing admin:', error);
    }
}

// Middleware to create/validate user cookie
const userCookieMiddleware = (req, res, next) => {
    // Skip cookie generation for admin routes
    if (req.path.includes('/api/login') || req.path.includes('/api/signup') || req.path.includes('/api/verify')) {
        return next();
    }

    let userId = req.cookies.userId;
    let cookieTimestamp = req.cookies.userIdTimestamp;
    const now = Date.now();
    const FULL_TIME = 24 * 60 * 60 * 1000; // 24 hours in milliseconds

    // Check if cookie exists AND is still valid
    const isExpired = !cookieTimestamp || (now - parseInt(cookieTimestamp)) > FULL_TIME;

    if (!userId || isExpired) {
        userId = uuidv4(); // Generate new userid
        
        // Set both the userId and timestamp cookies
        res.cookie('userId', userId, {
            maxAge: FULL_TIME,
            httpOnly: true, 
            secure: process.env.NODE_ENV === 'production',
            sameSite: 'lax'
        });
        
        res.cookie('userIdTimestamp', now.toString(), {
            maxAge: FULL_TIME,
            httpOnly: true,
            secure: process.env.NODE_ENV === 'production',
            sameSite: 'lax'
        });
        
        console.log('New user cookie generated:', userId, 'at', new Date(now).toLocaleTimeString());
    } else {
        console.log('Existing user:', userId, '(age:', Math.floor((now - parseInt(cookieTimestamp)) / 1000), 'seconds)');
    }

    // Attach userId to request object for use in other routes
    req.userId = userId;
    next();
};

// Apply cookie middleware to all routes
app.use(userCookieMiddleware);

// Login Route - ADMIN ONLY
app.post('/api/login', async (req, res) => {
    try {
        const { email, password } = req.body;

        console.log('Login attempt for email:', email); // Debug log

        // Validate input
        if (!email || !password) {
            return res.status(400).json({ 
                success: false, 
                message: 'Email and password are required' 
            });
        }

        // ONLY ALLOW ADMIN LOGIN
        if (email.toLowerCase() !== 'admin@gmail.com') {
            console.log('Login rejected - not admin email:', email);
            return res.status(403).json({ 
                success: false, 
                message: 'Access denied. Admin only.' 
            });
        }

        // Find admin user only
        const user = await User.findOne({ email: 'admin@gmail.com' });
        if (!user) {
            return res.status(401).json({ 
                success: false, 
                message: 'Admin account not found' 
            });
        }

        // Verify password
        const isPasswordValid = await bcrypt.compare(password, user.password);
        if (!isPasswordValid) {
            console.log('Invalid password for admin');
            return res.status(401).json({ 
                success: false, 
                message: 'Invalid credentials' 
            });
        }

        // Generate JWT token
        const token = jwt.sign(
            { userId: user._id, email: user.email, role: user.role },
            JWT_SECRET,
            { expiresIn: '24h' }
        );

        console.log('Admin login successful'); // Debug log

        // Send response
        res.json({
            success: true,
            message: 'Admin login successful',
            token,
            user: {
                email: user.email,
                role: user.role
            }
        });

    } catch (error) {
        console.error('Login error:', error);
        res.status(500).json({ 
            success: false, 
            message: 'Server error' 
        });
    }
});

// API to test which user has which userid
app.get('/api/test-user', (req, res) => {
    res.json({
        userId: req.userId,
        timestamp: req.cookies.userIdTimestamp,
    });
});

// Call the exampleRoutes API here url: http://localhost:8000/api/{all api's are added here}
app.use('/api', exampleRoutes);

// Connect to MongoDB
mongoose.connect(MONGOURL).then(async () => {
    console.log("Database connected successfully.");
    console.log("Database URL:", MONGOURL);
    
    // Initialize admin user only
    await initializeAdmin();
        
    app.listen(PORT, () => {
        console.log(`Server is running on port ${PORT}`);
        console.log(`Admin email: admin@gmail.com pass: admin123`);
    });
}).catch((error) => {
    console.error("MongoDB connection error:", error);
    process.exit(1);
});